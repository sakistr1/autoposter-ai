from pydantic import BaseModel, HttpUrl, EmailStr
from typing import List, Optional, Any, Dict, Union
from datetime import datetime

# ==========================
# Helper: mode normalization
# ==========================

def _normalize_mode(m: Optional[str]) -> str:
    s = (m or "").strip().lower()
    return {
        "κανονικό": "normal",
        "κανονικο": "normal",
        "funny": "normal",
        "professional": "normal",
    }.get(s, s or "normal")


# ----------------- Woo / Billing -----------------

class WooCommerceCredentials(BaseModel):
    woocommerce_url: str
    consumer_key: str
    consumer_secret: str
    # προαιρετικό, το χρησιμοποιεί το UI σου
    sync_url: Optional[str] = None


class CreateCheckoutSessionRequest(BaseModel):
    plan_id: str


# ----------------- Users -----------------

class UserBase(BaseModel):
    email: EmailStr
    username: str


class UserCreate(UserBase):
    password: str


class UserLogin(BaseModel):
    email: EmailStr
    password: str


class UserOut(UserBase):
    id: int
    is_active: bool
    credits: int
    woocommerce_url: Optional[str] = None
    consumer_key: Optional[str] = None
    consumer_secret: Optional[str] = None
    # για να μην “σκάει” όταν το επιστρέφεις
    sync_url: Optional[str] = None

    class Config:
        orm_mode = True


class UserUpdateWoocommerce(BaseModel):
    woocommerce_url: str
    consumer_key: str
    consumer_secret: str
    sync_url: Optional[str] = None


class Token(BaseModel):
    access_token: str
    token_type: str


# ----------------- Products / Posts -----------------

class ProductBase(BaseModel):
    name: str
    description: Optional[str] = None
    # Χαλαρώσεις για να μην κόβει validation & για συμβατότητα με DB
    price: Optional[Union[float, str]] = None
    image_url: Optional[Union[HttpUrl, str]] = None
    permalink: Optional[Union[HttpUrl, str]] = None
    categories: Optional[str] = None
    # προαιρετικά που μπορεί να υπάρχουν στο ORM σου
    sku: Optional[str] = None
    currency: Optional[str] = "EUR"
    stock: Optional[int] = None


class ProductCreate(ProductBase):
    pass


class ProductOut(ProductBase):
    id: int
    owner_id: int

    class Config:
        orm_mode = True


class PostBase(BaseModel):
    product_id: int
    type: str
    media_urls: List[str]
    caption: Optional[str]
    mode: Optional[str]


class PostCreate(PostBase):
    pass


class PostOut(PostBase):
    id: int
    created_at: datetime

    class Config:
        orm_mode = True


class CreditResponse(BaseModel):
    message: str
    remaining_credits: int


# ----------------- Templates (DB-side) -----------------

class TemplateBase(BaseModel):
    name: str           # internal name
    type: str           # image | carousel | video
    file_path: str      # filesystem path


class TemplateCreate(TemplateBase):
    owner_id: Optional[int]


class TemplateOut(TemplateBase):
    id: int
    owner_id: Optional[int]
    created_at: datetime
    updated_at: datetime

    class Config:
        orm_mode = True


# ----------------- Template Engine (API requests) -----------------
# Τα παρακάτω βοηθούν να κρατάς το schema σε ένα σημείο
# και να μην “σπάει” με relative preview_url.

class TEnginePreviewRequest(BaseModel):
    """
    Preview αίτημα. Κρατάμε το schema χαλαρό γιατί το UI
    είτε στέλνει template_id/params είτε (ratio/mode/title/price…).
    """
    # Path A: άμεσο template render
    template_id: Optional[str] = None
    product_id: Optional[int] = None
    params: Optional[Dict[str, Any]] = None

    # Path B: wizard-friendly fields (όπως στέλνει το dashboard)
    post_type: Optional[str] = None
    mode: Optional[str] = None
    ratio: Optional[str] = None
    title: Optional[str] = None
    price: Optional[str] = None
    image_url: Optional[str] = None  # δέξου και μη-HttpUrl (π.χ. data URL)


class TEngineCommitRequest(BaseModel):
    """
    Commit αίτημα. Σημαντικό: preview_url = str (όχι HttpUrl)
    ώστε να επιτρέπονται και relative paths (/static/...).
    """
    template_id: Optional[str] = None
    product_id: Optional[int] = None
    preview_url: str
    caption: Optional[str] = None
    post_type: Optional[str] = None


# ============================
# Previews API — STRICT MODELS
# ============================
from typing import Literal as _Literal

AllowedRatio = _Literal['1:1','4:5','9:16']
AllowedPostType = _Literal['image','video','carousel']


class MappingV2(BaseModel):
    title: Optional[str] = None
    price: Optional[str] = None
    old_price: Optional[str] = None
    cta: Optional[str] = None
    logo_url: Optional[str] = None
    discount_badge: Optional[bool] = None
    discount_pct: Optional[str] = None
    target_url: Optional[str] = None
    qr_enabled: Optional[bool] = None


class RenderRequest(BaseModel):
    """
    Σφιχτή επικύρωση για /previews/render.
    Κανόνας: όταν mode είναι "Κανονικό"/"normal" ⇒ ΑΠΑΙΤΕΙΤΑΙ image_url.
    Επιτρέπουμε relative paths (π.χ. /static/demo/laptop.jpg) ή απλό string.
    """

    # βασικά
    ratio: Optional[str] = "4:5"
    mode: Optional[str] = "normal"
    post_type: Optional[str] = 'image'

    # κύριο asset
    image_url: Optional[str] = None
    product_image_url: Optional[str] = None
    brand_logo_url: Optional[str] = None
    logo_url: Optional[str] = None

    # απλά commerce πεδία
    title: Optional[str] = None
    price: Optional[str] = None
    old_price: Optional[str] = None
    new_price: Optional[str] = None
    discount_pct: Optional[str] = None
    cta_text: Optional[str] = None

    # CTAs/QR
    target_url: Optional[str] = None
    qr: Optional[bool] = None

    # AI background / wizard
    ai_bg: Optional[str] = None
    ai_bg_prompt: Optional[str] = None

    # πολλές εικόνες (video/carousel)
    extra_images: Optional[List[Union[str, Dict[str, Any]]]] = None
    images: Optional[List[Union[str, Dict[str, Any]]]] = None
    media_urls: Optional[List[Union[str, Dict[str, Any]]]] = None

    # χάρτης στοιχείων overlay
    mapping: Optional[Union[MappingV2, Dict[str, Any]]] = None

    # raw meta για ευελιξία (JSON str ή dict)
    meta: Optional[Union[Dict[str, Any], str]] = None

    # --- strict rule ---
    @classmethod
    def validate(cls, value):  # type: ignore[override]
        obj = super().validate(value)  # BaseModel → αντικείμενο
# normalize/aliases
m = _normalize_mode(getattr(obj, "mode", None))
if not getattr(obj, "image_url", None) and getattr(obj, "product_image_url", None):
    obj.image_url = obj.product_image_url
if not getattr(obj, "logo_url", None) and getattr(obj, "brand_logo_url", None):
    obj.logo_url = obj.brand_logo_url

# ratio whitelist
allowed_ratios = {"1:1","4:5","9:16"}
r = getattr(obj, "ratio", "4:5") or "4:5"
if r not in allowed_ratios:
    raise ValueError(f"ratio must be one of {sorted(allowed_ratios)}")

# image required in normal/copy
if m in ("normal", "copy"):
    if not getattr(obj, "image_url", None):
        raise ValueError("image_url is required for mode=Κανονικό/normal")

# need >=2 images if post_type or mode is video/carousel
pt = (getattr(obj, "post_type", None) or "").lower()
needs_multi = pt in ("video","carousel") or m in ("video","carousel")

def _count(seq):
    c = 0
    for it in (seq or []):
        if isinstance(it, str):
            c += 1
        elif isinstance(it, dict):
            if any(k in it for k in ("url","image_url","media_url","path","image")):
                c += 1
    return c

if needs_multi:
    total = _count(getattr(obj, "images", None))                     + _count(getattr(obj, "extra_images", None))                     + _count(getattr(obj, "media_urls", None))                     + (1 if getattr(obj, "image_url", None) else 0)
    if total < 2:
        raise ValueError("post_type=video/carousel requires at least two images/media sources")
        return obj


        return obj


class CommitRequest(BaseModel):
    preview_id: Optional[str] = None
    preview_url: Optional[str] = None


class RegenerateRequest(BaseModel):
    preview_id: str
    max_passes: int = 1


class DeletePreviewRequest(BaseModel):
    preview_id: str
